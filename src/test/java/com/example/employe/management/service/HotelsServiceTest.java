package com.example.employe.management.service;

import com.example.employe.management.Repo.HotelsRepository;
import com.example.employe.management.dto.HoteldDto;
import com.example.employe.management.model.Hotels;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import java.util.Optional;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;




@SpringBootTest
class HotelsServiceTest {

    @Mock
    private HotelsRepository hotelsRepository;

    @InjectMocks
    private HotelsService hotelsService;

    @Test
    public void testGetAllHotels() {
        // Mock data
        List<Hotels> hotels = new ArrayList<>();
        hotels.add(new Hotels());
        hotels.add(new Hotels());

        // Mocking repository
        when(hotelsRepository.findAll()).thenReturn(hotels);

        // Call the service method
        List<Hotels> result = hotelsService.getAllHotels();

        // Assertions
        assertEquals(2, result.size());
    }
    @Test
    public void testGetHotelById() {
        // Mock data
        Long hotelId = 1L;
        Hotels hotel = new Hotels();
        hotel.setHotelId(hotelId);

        // Mocking repository
        when(hotelsRepository.findById(hotelId)).thenReturn(Optional.of(hotel));

        // Call the service method
        Optional<Hotels> result = hotelsService.getHotelById(hotelId);

        // Assertions
        assertTrue(result.isPresent());
        assertEquals(hotelId, result.get().getHotelId());
    }

    @Test
    public void testAddHotel() {
        // Mock data
        HoteldDto hotelDto = new HoteldDto();
        hotelDto.setHotelName("Test Hotel");
        hotelDto.setAdresse("Test Address");
        hotelDto.setNumberOfStars(4);
        // Set other fields as needed for testing

        // Mocking repository
        when(hotelsRepository.save(any())).thenAnswer(invocation -> {
            Hotels savedHotel = invocation.getArgument(0);
            savedHotel.setHotelId(1L); // Mocking the ID generated by the repository
            return savedHotel;
        });

        // Call the service method
        Hotels result = hotelsService.addHotel(hotelDto);

        // Assertions
        assertNotNull(result);
        assertEquals("Test Hotel", result.getHotelName());
        assertEquals("Test Address", result.getAdresse());
        assertEquals(4, result.getNumberOfStars());
        // Add more assertions for other fields

        // Verify that the repository's save method was called
        verify(hotelsRepository, times(1)).save(any());
    }
}